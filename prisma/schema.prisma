generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Notification {
  dateIssued      DateTime       @default(now()) @db.Timestamptz(6)
  type            String?        @db.VarChar
  content         String?        @db.VarChar
  data            Json?
  expiresOn       DateTime       @default(dbgenerated("(now() + '7 days'::interval)")) @db.Timestamptz(6)
  id              BigInt         @id @default(autoincrement())
  userId          String         @db.Uuid
  postId          String?        @db.Uuid
  followRequestId BigInt?
  viewed          Boolean        @default(false)
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  post            Post?          @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  followRequest   FollowRequest?
}

model PostLike {
  postId  String   @db.Uuid
  userId  String   @db.Uuid
  liked   Boolean  @default(true)
  likedAt DateTime @default(now()) @db.Timestamptz(6)
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([postId, userId])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Post {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postedAt      DateTime       @default(now()) @db.Timestamptz(6)
  content       String
  replyTo       String?        @db.Uuid
  lastEdited    DateTime       @default(now()) @db.Timestamptz(6)
  userId        String?        @db.Uuid
  postLikes     PostLike[]
  genres        PostGenre[]
  user          User?          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  post          Post?          @relation("postsToposts", fields: [replyTo], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replies       Post[]         @relation("postsToposts")
  notifications Notification[]
}

model Session {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expiresAt DateTime @default(dbgenerated("NOW() + '7 days'::interval")) @db.Timestamptz(6)
  data      Json?
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model User {
  id            String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userName      String            @unique @db.VarChar(25)
  joinedAt      DateTime          @default(now()) @db.Timestamptz(6)
  passwordHash  String            @db.Char(60)
  avatarPath    String?           @db.VarChar
  role          UserRole          @default(NONE)
  visibility    ProfileVisibility @default(PUBLIC)
  displayName   String?           @db.VarChar(20)
  bio           String?           @db.VarChar(300)
  birthDate     DateTime?
  notifications Notification[]
  postLikes     PostLike[]
  posts         Post[]
  sessions      Session[]
  following     Follow[]          @relation("follower")
  followers     Follow[]          @relation("following")
  requests      FollowRequest[]   @relation("requested")
  sentRequests  FollowRequest[]   @relation("requestor")
}

model Follow {
  followerId  String   @db.Uuid
  followingId String   @db.Uuid
  followedAt  DateTime @default(now())

  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([followerId, followingId])
}

model FollowRequest {
  id             BigInt   @id @default(autoincrement())
  requestorId    String   @db.Uuid
  requestedId    String   @db.Uuid
  notificationId BigInt?  @unique
  requestedAt    DateTime @default(now())

  requestor    User          @relation("requestor", fields: [requestorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  requested    User          @relation("requested", fields: [requestedId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  notification Notification? @relation(fields: [notificationId], references: [id], onDelete: Cascade)
}

model PostGenre {
  postId String @db.Uuid
  genre  Genre

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([postId, genre])
}

enum Genre {
  COMEDY
  SCI_FI
  THRILLER
  ROMANCE
  FANTASY
  SCARY
  ACTION
  FICTION
  MUSIC
  TELEVISION
  ART
  POLITICAL
}

enum ProfileVisibility {
  PUBLIC
  FRIENDS
}

enum UserRole {
  NONE
  MODERATOR
}
